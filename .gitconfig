[user]
	name = Neo Ighodaro
	email = neo@creativitykills.co

# .gitconfig but for work
[includeIf "gitdir:~/Dev/Work/"]
    path = ~/.gitconfig.work

[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.global-gitignore
	# Treat spaces before tabs, lines that are indented with 8 or more spaces, and all kinds of trailing whitespace as an error
	whitespace = space-before-tab,indent-with-non-tab,trailing-space

[alias]
    # Add file
    a = add
    # Initialise repository
    i = !"git init && git add . && git commit -m 'Initial commit.'"
    # Reset back to head
    nah = !"git reset --hard; git clean -df"
    # View remote URL
    remote-url = config --get remote.origin.url
	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit
    # View the current working tree status using the short format
	s = status -s
	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"
    # Push tags
    psht = push --tags
	# Clone a repository including all submodules
	c = clone --recursive
	# Commit all changes
	ca = !git add -A && git commit -av
    # Commit with message
    cm = commit -m
    # Commit with message and add
    cma = "!cma() { git add \"$1\"; git commit -m \"$2\"; }; cma"
	# Switch to a branch, creating it if necessary
	go = checkout -B
	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v
	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

# Use `origin` as the default remote on the `master` branch in all cases
[branch "master"]
	remote = origin
	merge = refs/heads/master

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[color]
    # Use colors in Git commands that are capable of colored output when outputting to the terminal
	ui = auto
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true

# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "gh:"
[url "git://github.com/"]
	insteadOf = "github:"
	pushInsteadOf = "github:"
[url "git@gist.github.com:"]
	insteadOf = "gist:"
	pushInsteadOf = "gist:"
[url "git://gist.github.com/"]
	insteadOf = "gist:"

[push]
	default = matching
